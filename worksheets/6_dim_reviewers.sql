USE ROLE DEV;
CREATE TABLE IF NOT EXISTS taskdb.dwh.dim_movies_reviewers
    DATA_RETENTION_TIME_IN_DAYS = 1
    (
    created_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    reviewer STRING(255) UNIQUE NOT NULL
    );

USE ROLE DEV;
CREATE STREAM IF NOT EXISTS taskdb.dwh.stream_movies_details4dim_reviewers ON DYNAMIC TABLE TASKDB.STG.MOVIES_DETAILS;

USE ROLE OPS;
CREATE OR REPLACE TASK taskdb.dwh.populate_dim_movies_reviewers
    WAREHOUSE = TRANSFORM_WH
    AFTER TASKDB.DWH.DWH_START
    AS 
MERGE INTO taskdb.dwh.dim_movies_reviewers dr USING (
    WITH source AS (
        SELECT response, METADATA$ISUPDATE
        FROM TASKDB.DWH.STREAM_MOVIES_DETAILS4DIM_REVIEWERS WHERE METADATA$ACTION <> 'DELETE'
    )
    SELECT DISTINCT value:Source::string AS reviewer, METADATA$ISUPDATE
    FROM source,
    LATERAL FLATTEN(input => response:Ratings)
    UNION
    SELECT 'IMDb', FALSE
    ) s
ON dr.reviewer=s.reviewer
/* WHEN MATCHED AND s.METADATA$ISUPDATE = 'TRUE' THEN UPDATE
    SET dr.updated_date = current_timestamp() */
WHEN NOT MATCHED THEN INSERT (reviewer)
    VALUES (s.reviewer);

-- DELETION SECTION
/* 
USE ROLE DEV;
ALTER TASK TASKDB.DWH.POPULATE_DIM_MOVIES_REVIEWERS SUSPEND;
DROP TASK IF EXISTS TASKDB.DWH.POPULATE_DIM_MOVIES_REVIEWERS;
DROP STREAM IF EXISTS TASKDB.DWH.STREAM_MOVIES_DETAILS4DIM_REVIEWERS;
DROP TABLE IF EXISTS TASKDB.DWH.DIM_MOVIES_REVIEWERS;
*/